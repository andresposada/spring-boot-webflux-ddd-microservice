plugins {  
  id 'io.spring.dependency-management' version "$springDependencyManagement"
  id "io.freefair.lombok" version "$lombokPluginVersion"
  id "com.github.sherter.google-java-format" version "$googleJavaFormatVersion"   
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.freefair.lombok'

    group = "org.afp.${rootProject.name}"
    version = "0.0.1-SNAPSHOT"
    sourceCompatibility = "1.11"

    if (it.name != 'core') {
        apply plugin: 'io.spring.dependency-management'
        dependencyManagement {
            imports {
                mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
            }
        }
        dependencies {
            // metrics / monitoring
            implementation 'io.micrometer:micrometer-core'
            implementation 'io.micrometer:micrometer-registry-prometheus'

            implementation "org.mapstruct:mapstruct:$mapstructVersion"
            annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
        }
    }

    // Common dependencies for 3 subprojects (application, core, infrastructure)
    dependencies {
        // Test framework
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation group: 'org.mockito', name: 'mockito-core', version: "$mockitoVersion"
        testImplementation "com.tngtech.archunit:archunit-junit5:$archUnitVersion"

        //Faker for unit-testing
        implementation group: 'com.github.javafaker', name: 'javafaker', version: "$javaFakerVersion"

        //Logging
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: "$logbackVersion"

        // Utilities
        implementation group: 'commons-beanutils', name: 'commons-beanutils', version: "$commonsBeansUtilsVersion"
    }

    test {
        maxParallelForks 3
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        reports {
            junitXml.required = true
            html.required = true
        }
        finalizedBy tasks.named("jacocoTestReport")
    }

    tasks.named("jacocoTestReport") {
        it.dependsOn test // tests are required to run before generating the report
        it.reports {
            xml.required= true
            csv.required=false
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required=false
            html.required=true
        }
    }
}