buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:$pitVersion"
  }
}

plugins {
  id 'io.spring.dependency-management' version "$springDependencyManagement"
  id "io.freefair.lombok" version "$lombokPluginVersion"
  id "com.github.sherter.google-java-format" version "$googleJavaFormatVersion"
  //id 'info.solidsoft.pitest' version "$pitVersion"
}

allprojects {
  apply plugin: 'info.solidsoft.pitest.aggregator'
  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.freefair.lombok'
  apply plugin: 'info.solidsoft.pitest'

  group = "org.afp.${rootProject.name}" as Object
  version = "0.0.1-SNAPSHOT"
  sourceCompatibility = "1.11"

  if (it.name != 'core') {
    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
      imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
      }
    }
    dependencies {
      // metrics / monitoring
      implementation 'io.micrometer:micrometer-core'
      implementation 'io.micrometer:micrometer-registry-prometheus'

      implementation "org.mapstruct:mapstruct:$mapstructVersion"
      annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

      testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
      }
    }
  }

  // Common dependencies for 3 subprojects (application, core, infrastructure)
  dependencies {
    // Test framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: "$reactorTestVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "$mockitoVersion"
    testImplementation "com.tngtech.archunit:archunit-junit5:$archUnitVersion"

    //Faker for unit-testing
    implementation group: 'com.github.javafaker', name: 'javafaker', version: "$javaFakerVersion"

    //Logging
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: "$logbackVersion"

    // Utilities
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: "$commonsBeansUtilsVersion"
  }

  test {
    maxParallelForks 3
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    reports {
      junitXml.required = true
      html.required = true
    }
    finalizedBy tasks.named("jacocoTestReport")
  }

  pitest {
    targetClasses.set(["org.afp.dddmicroservice.*"])
    targetTests.set(["org.afp.dddmicroservice.*"])
    excludedClasses.set([
            "org.afp.dddmicroservice.application.config.*",
            "org.afp.dddmicroservice.application.model.*",
            "org.afp.dddmicroservice.core.domains.*",
            "org.afp.dddmicroservice.infrastructure.entities.*",
            "org.afp.dddmicroservice.infrastructure.mappers.*"
            ])
    outputFormats.set(["HTML", "XML"])
    junit5PluginVersion.set('0.15')
    timestampedReports.set(false)
    exportLineCoverage.set(true)
  }

  tasks.named("jacocoTestReport") {
    it.dependsOn test // tests are required to run before generating the report
    it.reports {
      xml.required= true
      csv.required=false
    }
  }

  tasks.withType(Checkstyle) {
    reports {
      xml.required=false
      html.required=true
    }
  }
}

task build {
  dependsOn("application:pitest")
  dependsOn("core:pitest")
  dependsOn("infrastructure:pitest")
  dependsOn("pitestReportAggregate")
}